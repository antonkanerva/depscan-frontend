// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/service.proto (package gitlab, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * The access token is no longer needed in the request message
 * as it will be passed via the Authorization header
 *
 * @generated from message gitlab.GetDependenciesRequest
 */
export class GetDependenciesRequest extends Message<GetDependenciesRequest> {
  constructor(data?: PartialMessage<GetDependenciesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitlab.GetDependenciesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDependenciesRequest {
    return new GetDependenciesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDependenciesRequest {
    return new GetDependenciesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDependenciesRequest {
    return new GetDependenciesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDependenciesRequest | PlainMessage<GetDependenciesRequest> | undefined, b: GetDependenciesRequest | PlainMessage<GetDependenciesRequest> | undefined): boolean {
    return proto3.util.equals(GetDependenciesRequest, a, b);
  }
}

/**
 * @generated from message gitlab.GetDependenciesResponse
 */
export class GetDependenciesResponse extends Message<GetDependenciesResponse> {
  /**
   * @generated from field: repeated gitlab.Project projects = 1;
   */
  projects: Project[] = [];

  constructor(data?: PartialMessage<GetDependenciesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitlab.GetDependenciesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "message", T: Project, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDependenciesResponse {
    return new GetDependenciesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDependenciesResponse {
    return new GetDependenciesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDependenciesResponse {
    return new GetDependenciesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDependenciesResponse | PlainMessage<GetDependenciesResponse> | undefined, b: GetDependenciesResponse | PlainMessage<GetDependenciesResponse> | undefined): boolean {
    return proto3.util.equals(GetDependenciesResponse, a, b);
  }
}

/**
 * @generated from message gitlab.Project
 */
export class Project extends Message<Project> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string language = 2;
   */
  language = "";

  /**
   * @generated from field: repeated gitlab.Dependency dependencies = 3;
   */
  dependencies: Dependency[] = [];

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitlab.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dependencies", kind: "message", T: Dependency, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

/**
 * @generated from message gitlab.Dependency
 */
export class Dependency extends Message<Dependency> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string current_version = 2;
   */
  currentVersion = "";

  /**
   * @generated from field: string latest_version = 3;
   */
  latestVersion = "";

  /**
   * @generated from field: int32 lib_year = 4;
   */
  libYear = 0;

  constructor(data?: PartialMessage<Dependency>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitlab.Dependency";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "current_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "latest_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lib_year", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Dependency {
    return new Dependency().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Dependency {
    return new Dependency().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Dependency {
    return new Dependency().fromJsonString(jsonString, options);
  }

  static equals(a: Dependency | PlainMessage<Dependency> | undefined, b: Dependency | PlainMessage<Dependency> | undefined): boolean {
    return proto3.util.equals(Dependency, a, b);
  }
}

