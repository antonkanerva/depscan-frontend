/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: proto/service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace gitlab {
    export class GetDependenciesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetDependenciesRequest {
            const message = new GetDependenciesRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDependenciesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDependenciesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDependenciesRequest {
            return GetDependenciesRequest.deserialize(bytes);
        }
    }
    export class GetDependenciesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            projects?: Project[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("projects" in data && data.projects != undefined) {
                    this.projects = data.projects;
                }
            }
        }
        get projects() {
            return pb_1.Message.getRepeatedWrapperField(this, Project, 1) as Project[];
        }
        set projects(value: Project[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            projects?: ReturnType<typeof Project.prototype.toObject>[];
        }): GetDependenciesResponse {
            const message = new GetDependenciesResponse({});
            if (data.projects != null) {
                message.projects = data.projects.map(item => Project.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                projects?: ReturnType<typeof Project.prototype.toObject>[];
            } = {};
            if (this.projects != null) {
                data.projects = this.projects.map((item: Project) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.projects.length)
                writer.writeRepeatedMessage(1, this.projects, (item: Project) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDependenciesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDependenciesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.projects, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Project.deserialize(reader), Project));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDependenciesResponse {
            return GetDependenciesResponse.deserialize(bytes);
        }
    }
    export class Project extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            language?: string;
            dependencies?: Dependency[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("language" in data && data.language != undefined) {
                    this.language = data.language;
                }
                if ("dependencies" in data && data.dependencies != undefined) {
                    this.dependencies = data.dependencies;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get language() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set language(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get dependencies() {
            return pb_1.Message.getRepeatedWrapperField(this, Dependency, 3) as Dependency[];
        }
        set dependencies(value: Dependency[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            language?: string;
            dependencies?: ReturnType<typeof Dependency.prototype.toObject>[];
        }): Project {
            const message = new Project({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.language != null) {
                message.language = data.language;
            }
            if (data.dependencies != null) {
                message.dependencies = data.dependencies.map(item => Dependency.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                language?: string;
                dependencies?: ReturnType<typeof Dependency.prototype.toObject>[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.language != null) {
                data.language = this.language;
            }
            if (this.dependencies != null) {
                data.dependencies = this.dependencies.map((item: Dependency) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.language.length)
                writer.writeString(2, this.language);
            if (this.dependencies.length)
                writer.writeRepeatedMessage(3, this.dependencies, (item: Dependency) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Project {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Project();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.language = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.dependencies, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Dependency.deserialize(reader), Dependency));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Project {
            return Project.deserialize(bytes);
        }
    }
    export class Dependency extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            current_version?: string;
            latest_version?: string;
            lib_year?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("current_version" in data && data.current_version != undefined) {
                    this.current_version = data.current_version;
                }
                if ("latest_version" in data && data.latest_version != undefined) {
                    this.latest_version = data.latest_version;
                }
                if ("lib_year" in data && data.lib_year != undefined) {
                    this.lib_year = data.lib_year;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get current_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set current_version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get latest_version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set latest_version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get lib_year() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set lib_year(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            name?: string;
            current_version?: string;
            latest_version?: string;
            lib_year?: number;
        }): Dependency {
            const message = new Dependency({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.current_version != null) {
                message.current_version = data.current_version;
            }
            if (data.latest_version != null) {
                message.latest_version = data.latest_version;
            }
            if (data.lib_year != null) {
                message.lib_year = data.lib_year;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                current_version?: string;
                latest_version?: string;
                lib_year?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.current_version != null) {
                data.current_version = this.current_version;
            }
            if (this.latest_version != null) {
                data.latest_version = this.latest_version;
            }
            if (this.lib_year != null) {
                data.lib_year = this.lib_year;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.current_version.length)
                writer.writeString(2, this.current_version);
            if (this.latest_version.length)
                writer.writeString(3, this.latest_version);
            if (this.lib_year != 0)
                writer.writeInt32(4, this.lib_year);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Dependency {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Dependency();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.current_version = reader.readString();
                        break;
                    case 3:
                        message.latest_version = reader.readString();
                        break;
                    case 4:
                        message.lib_year = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Dependency {
            return Dependency.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedGitLabServiceService {
        static definition = {
            GetDependencies: {
                path: "/gitlab.GitLabService/GetDependencies",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetDependenciesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetDependenciesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetDependenciesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetDependenciesResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetDependencies(call: grpc_1.ServerUnaryCall<GetDependenciesRequest, GetDependenciesResponse>, callback: grpc_1.sendUnaryData<GetDependenciesResponse>): void;
    }
    export class GitLabServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedGitLabServiceService.definition, "GitLabService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetDependencies: GrpcUnaryServiceInterface<GetDependenciesRequest, GetDependenciesResponse> = (message: GetDependenciesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetDependenciesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetDependenciesResponse>, callback?: grpc_1.requestCallback<GetDependenciesResponse>): grpc_1.ClientUnaryCall => {
            return super.GetDependencies(message, metadata, options, callback);
        };
    }
}
